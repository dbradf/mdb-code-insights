[{"id":0,"href":"/mdb-code-insights/demo/loading_data/","title":"Loading Data","parent":"Demo","content":"  Before starting this demo, before to have the prerequisites installed as described in the intro.  The first thing we need to do is load data from our git repository into our MongoDB instance. This is done with the load subcommand. You will need a local copy of the git repository you wish to analyze before starting. For the demo, we will assume that the repo has been cloned to $HOME/repos/mongo.\nUsing the load command     The load subcommand will load data from the specified git repository into our mongo instance. It takes 2 arguments:\n \u0026ndash;repo-dir: The path to the git repository to analyze. \u0026ndash;after-date: How far back in the repository to collect information for. For repositories with a lot of history, this can speed up the import time by restricting the amount of data that will be gathered. Additionally, if you have a job running the tool on a regular basis to keep the mongo data up to date, this option can be used to only look at new git data.  We can load the last few years of git data from the mongo repository with:\nmdb-code-insights --config-file config.yml load --after-date 2018-01-01 --repo-dir $HOME/repos/mongo Depending on how much git data is being collected, the command could take a few minutes to run. Once it has completed, the output should look something like this:\n$ target/release/mdb-code-insights --config-file config.yml load --after-date 2018-01-01 --repo-dir $HOME/repos/mongo Create data in: 38156ms Loaded 24994 commits! Sent data to mongo in: 2170ms If you now look at your mongo instance, the git data should be available to explore.\nNext Steps     Once the data has been loaded, we can start to analyze it. We will start by finding the most heavily edited files.\n"},{"id":1,"href":"/mdb-code-insights/getting_started/","title":"Getting Started","parent":"","content":"    Installation      Configuration      "},{"id":2,"href":"/mdb-code-insights/getting_started/installation/","title":"Installation","parent":"Getting Started","content":"Prerequisites     In order to use this tool, you will need the following:\n git command line: Version 2.17 or higher MongoDB: Version 5.0 or higher. Most features of the tool will work with a local instance of MongoDB. In order to work with Chart\u0026rsquo;s visualizations, you will need to use an Atlas cluster.  Install pre-built binaries     Pre-built binaries for Linux, Mac, and Windows are available here.\nTo install, download the appropriate binary for your system to somewhere that is in your PATH. You should then be able to execute it from the command line.\nInstall from source     If you would prefer to build from source, be sure you have a Rust development environment installed. You can then use cargo build --release to build the tool.\nTesting your install     You can test your install with the following command, mdb-code-insights --help. You should see a message like the following:\n$ mdb-code-insights --help mdb-code-insights USAGE: mdb-code-insights [OPTIONS] \u0026lt;SUBCOMMAND\u0026gt; OPTIONS: --collection \u0026lt;COLLECTION\u0026gt; Collection to use --config-file \u0026lt;CONFIG_FILE\u0026gt; Path to config file to use --database \u0026lt;DATABASE\u0026gt; Database to use -h, --help Print help information --mongo-uri \u0026lt;MONGO_URI\u0026gt; URI to mongodb instance SUBCOMMANDS: file-activity file-coupling file-ownership files-per-commit help Print this message or the help of the given subcommand(s) What\u0026rsquo;s next     Once you have the tool installed, you will want to configure it.\n"},{"id":3,"href":"/mdb-code-insights/demo/file_activity/","title":"File Activity","parent":"Demo","content":"  Before performing this analysis, before you have some data loaded from a git repository  Now that we have some data in our mongo instance, lets start analyzing it. A useful place to start it to see which files have been changed the most. Files that change frequently are more likely to contain bugs or be bottlenecks in the development process.\nUsing an aggregation     We can use the following aggregation to find frequently changed files:\n[ { $match: { date: {$gt: ISODate(\u0026#34;2020-01-01\u0026#34;)}, }, }, { $unwind: { path: \u0026#34;$files\u0026#34;, }, }, { $sortByCount: \u0026#34;$files.filename\u0026#34;, }, ] Using the command line     We can also use the file-activity subcommand to run this aggregation:\nmdb-code-insights --config-file config.yml file-activity --since 2020-01-01 src/third_party/wiredtiger/import.data: 1335 etc/evergreen.yml: 892 src/mongo/db/SConscript: 354 src/mongo/db/repl/replication_coordinator_impl.cpp: 309 src/mongo/db/s/SConscript: 299 src/mongo/db/repl/SConscript: 245 SConstruct: 226 src/third_party/wiredtiger/test/evergreen.yml: 223 src/third_party/wiredtiger/src/include/wiredtiger.in: 220 ... Looking at the output, the first source code file that show up is src/mongo/db/repl/replication_coordinator_impl.cpp with 309 changes. We will use this file for future exploration.\nWhat\u0026rsquo;s next     Now that have an active file, we can analyze what other files are tightly coupled to it.\n"},{"id":4,"href":"/mdb-code-insights/getting_started/configuration/","title":"Configuration","parent":"Getting Started","content":"There are a few pieces of information needed to run the tool. These can be provided via command line arguments or with a configuration file.\nThe required details are:\n mongo_uri: The URI to use to connect to mongodb. database: The database in the mongo instance to store/load data. collection: The collection in the database to store/load data.  Command line configuration     All three options mentioned can be provided as command line options (see mdb-code-insights --help for details). They should be specified before the subcommand is given.\nFor example,\nmdb-code-insights --mongo-uri \u0026#34;mongodb://localhost:27017\u0026#34; --database \u0026#34;code_insights\u0026#34; --collection \u0026#34;my_repo\u0026#34; load ... Configuration file configuration     If you prefer, you can store the configuration options in a YAML file and provide that to the tool.\nThe YAML file should look like the following:\nmongo_uri:mongodb://localhost:27017database:code_insightscollection:mongoThe --config-file option can be used to specify the file to use:\nmdb-code-insights --config-file config.yml load ... "},{"id":5,"href":"/mdb-code-insights/demo/file_coupling/","title":"File Coupling","parent":"Demo","content":"  Before performing this analysis, you will want to have a active file to target  From the previous step, we decided to target the file src/mongo/db/repl/replication_coordinator_impl.cpp and see how it is coupled to other files in the repository.\nUsing an aggregation     We can analyze the file coupling with the following aggregation:\n[ { \u0026#34;$match\u0026#34;: { \u0026#34;date\u0026#34;: {\u0026#34;$gt\u0026#34;: ISODate(\u0026#34;2020-01-01\u0026#34;)}, \u0026#34;files.filename\u0026#34;: \u0026#34;src/mongo/db/repl/replication_coordinator_impl.cpp\u0026#34; } }, { \u0026#34;$facet\u0026#34;: { \u0026#34;total_commits\u0026#34;: [{ \u0026#34;$count\u0026#34;: \u0026#34;commit\u0026#34; }], \u0026#34;seen_with\u0026#34;: [ { \u0026#34;$unwind\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;$files\u0026#34; } }, { \u0026#34;$match\u0026#34;: { \u0026#34;files.filename\u0026#34;: { \u0026#34;$ne\u0026#34;: \u0026#34;src/mongo/db/repl/replication_coordinator_impl.cpp\u0026#34; } } }, { \u0026#34;$group\u0026#34;: { \u0026#34;_id\u0026#34;: \u0026#34;$files.filename\u0026#34;, \u0026#34;count\u0026#34;: { \u0026#34;$sum\u0026#34;: 1 } } }, { \u0026#34;$sort\u0026#34;: { \u0026#34;count\u0026#34;: -1 } } ] } }, ] Using the command line     We can also use the file-coupling subcommand to perform this aggregation:\nmdb-code-insights --config-file config.yml file-coupling --since \u0026#34;2020-01-01\u0026#34; --filename src/mongo/db/repl/replication_coordinator_impl.cpp src/mongo/db/repl/replication_coordinator_impl.cpp: 309 instances - src/mongo/db/repl/replication_coordinator_impl.h: 91: 29.45% - src/mongo/db/repl/replication_coordinator_mock.cpp: 63: 20.39% - src/mongo/embedded/replication_coordinator_embedded.cpp: 62: 20.06% - src/mongo/db/repl/replication_coordinator_mock.h: 61: 19.74% - src/mongo/embedded/replication_coordinator_embedded.h: 60: 19.42% - src/mongo/db/repl/replication_coordinator_noop.h: 60: 19.42% - src/mongo/db/repl/replication_coordinator_noop.cpp: 60: 19.42% - src/mongo/db/repl/replication_coordinator.h: 59: 19.09% - src/mongo/db/repl/topology_coordinator.cpp: 57: 18.45% - src/mongo/db/repl/replication_coordinator_impl_test.cpp: 51: 16.50% - src/mongo/db/repl/replication_coordinator_impl_heartbeat.cpp: 47: 15.21% ... From the output, a lot of the files look to be related to the file we are analyzing. Most of them look like tests or header files that we would expect to be closely related. However, the src/mongo/db/repl/topology_coordinator.cpp file seems to stand out. This file seems to change along with the given file more frequently than the unit tests for that file. That might be something we would want to look into.\nNext steps     Now that we have analyzed file coupling, let\u0026rsquo;s try another analysis to see file ownership\n"},{"id":6,"href":"/mdb-code-insights/demo/","title":"Demo","parent":"","content":"    Intro      Loading Data      File Activity      File Coupling      File Ownership      Using Charts      "},{"id":7,"href":"/mdb-code-insights/demo/file_ownership/","title":"File Ownership","parent":"Demo","content":"  Before performing this analysis, you will want to have a active file to target  One interesting view of a file is who has been making changes to it. This can be particularly useful when there are questions about the file or changes to it that need to be reviewed. We can analyze the file ownership to determine who has made the most changes to a file.\nUsing an aggregation     We can analyze the file ownership with the following aggregation:\n[ { $match: { date: { $gt: ISODate(\u0026#34;2020-01-01\u0026#34;) } } }, { $unwind: { path: \u0026#34;$files\u0026#34; } }, { $match: { \u0026#34;files.filename\u0026#34;: \u0026#34;src/mongo/db/repl/replication_coordinator_impl.cpp\u0026#34; } }, { $sortByCount: \u0026#34;$author\u0026#34; }, ] Using the command line     We can also use the file-ownership subcommand to perform this aggregation:\nmdb-code-insights --config-file config.yml file-ownership --since \u0026#34;2020-01-01\u0026#34; --filename src/mongo/db/repl/replication_coordinator_impl.cpp Owners of src/mongo/db/repl/replication_coordinator_impl.cpp: 309 total changes William Schultz: 23 (7.44%) Lingzhi Deng: 17 (5.50%) Pavi Vetriselvan: 17 (5.50%) A. Jesse Jiryu Davis: 16 (5.18%) Jason Chan: 15 (4.85%) Matthew Russotto: 15 (4.85%) Vesselina Ratcheva: 14 (4.53%) ... It looks like this file has had a good number of people make changes to it over the given time frame. It is good that there is some distributed knowledge about the file, but it could also be a sign that this file has too broad of responsibilities and might be a good target to refactor and split up.\nWhat\u0026rsquo;s next     Now that you\u0026rsquo;ve looked at file ownership, try visualizing some data with MongoDB Charts.\n"},{"id":8,"href":"/mdb-code-insights/demo/using_charts/","title":"Using Charts","parent":"Demo","content":"  Before performing this analysis, you will want to have a data loaded  If we load the data in a MongoDB Atlas cluster, we can use Charts to quickly create visualizations of the data. This section will look at an example chart.\n This section of the demo only works with data loaded in a MongoDB Atlas cluster. It is not available when running against other MongoDB instances.  Visualizing File Activity     In File ownership part of the demo, we looked at an aggregation that gave us a list of file that have been the most active. We can use Charts to look at this same information visually.\nThe first step is to launch charts and connect our collection as a data source. We won\u0026rsquo;t cover that here, so refer to the Chart\u0026rsquo;s documentation for details.\nOnce we have the data source hooked up we can create our first chart. Here are the details we want to wire up:\nChart Type: Bar / Stacked X Axis: commit Aggregate: Count Y Axis: files.filename Array Reductions: Unwind Array Sort By: Value Limit Results: 30 Series: date Binning: Month Once we get everything wired up correctly, we should have a visualization that looks like the following:\nWrap Up     That covers all the topics of the demo, but there is a lot more that can be explored.\n"},{"id":9,"href":"/mdb-code-insights/","title":"","parent":"","content":"MDB Code Insights Documentation     mdb-code-insights is a tool that uses MongoDB to explore the history of a git repository.\n"},{"id":10,"href":"/mdb-code-insights/demo/intro/","title":"Intro","parent":"Demo","content":"This demo will walk through using the mdb-code-insights tool to analyze a git repository. If you want to follow along, be sure to have the tool installed and configured.\nThe demo will walk through an analysis of the mongodb/mongo repository, but the steps should work with any git repository.\nFor this demo, we will store our configuration in a file called \u0026ldquo;config.yml\u0026rdquo;. It should look similar to this (feel free to customize it to your liking):\nmongo_uri:mongodb://localhost:27017database:code_insightscollection:mongoAggregation Framework     Throughout this demo, we will use MongoDB\u0026rsquo;s Aggregation Framework to explore the data. Most of the aggregation can be run via the mongodb-code-insights tool, but if you would like to run them manually or tweak them, you may want to have a mongo client available.\nMongoDB Compass, mongosh or any other mongo client should work for the examples in this demo.\nGetting Started     We will start by loading our git data into mongo.\n"},{"id":11,"href":"/mdb-code-insights/categories/","title":"Categories","parent":"","content":""},{"id":12,"href":"/mdb-code-insights/tags/","title":"Tags","parent":"","content":""}]